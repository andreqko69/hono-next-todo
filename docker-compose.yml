version: '3.8'

services:
  app:
    build:
      context: .
      target: ${TARGET:-dev}  # Use 'dev' by default, override with TARGET=runner for prod
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - APP_USER=${APP_USER}
      - APP_PASSWORD=${APP_PASSWORD}
      - APP_DB=${APP_DB}
      - APP_HOST=${APP_HOST}
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - .:/app  # Mount source code for development
      - /app/node_modules  # Don't override node_modules
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - .nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[p]ostgres' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
