version: '3.8'

services:
  app:
    build:
      context: ../../
      target: production
      dockerfile: Docker/production/Dockerfile
    ports:
      - '3000:3000'
    env_file: ../../.env.production
    environment:
      - APP_USER:${APP_USER}
      - APP_PASSWORD:${APP_PASSWORD}
      - APP_DB:${APP_DB}
      - APP_HOST:${APP_HOST}
      - AUTH_TRUST_HOST:${AUTH_TRUST_HOST}
      - NODE_ENV:production
    volumes:
      - /app/node_modules # Don't override node_modules
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ../../.nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    env_file: ../../.env.production
    environment:
      - POSTGRES_USER:${POSTGRES_USER}
      - POSTGRES_PASSWORD:${POSTGRES_PASSWORD}
      - POSTGRES_DB:${POSTGRES_DB}
      - APP_USER:${APP_USER}
      - APP_PASSWORD:${APP_PASSWORD}
      - APP_DB:${APP_DB}
    volumes:
      - ../../docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
